#
# base.dict .... makedict.sh sample dictionary template
#

    org 0
//
// inner interpreter
//
code exit word_exit
    jmp  (do_exit)
    endcode

//
// outer interpreter
//

// find (c-addr -- 0(not found), 
//                 xt 1(find, normal), 
//                 xt -1(find, immediate))
// xt means execution token, or cfa of the word
code find
    // (c-addr - 0| xt 1| xt -1)
    eor.l   %d0,%d0
    move.l  %d0,%a0
    move.w  (%a5)+,%a0      // c-addr -> %a0
    move.l  %d0,%a1
    move.w  (last_addr),%a1    // here -> %a1
find_0:
    jsr     do_same
    cmp.b   #0,%d0
    beq     find_1
    /* get the next entry top */
    eor.l   %d0,%d0
    move.b  (%a1),%d0
    and.b   #0x1f,%d0   // clear precedence bits(3bits)
    add.b   #2,%d0
    lsr     #1,%d0
    add.w   %d0,%d0     /* word offset to byte offset */
    add.w   %d0,%a1
    move.w  (%a1),%d0   /* %d0 now points to next entry top */
    and.w   #0xbfff,%d0 /* test %d0 (next ptr value) */
    move.w  %d0,%a1     /* clear precedence flag bits */   
    bne     find_0
    // not found, return zero
    move.w  %d0,-(%a5)
    bra     find_2 
find_1:
    // find an entry
    move.l  %a1,%a0
    move.b  (%a0),%d0
    and.w   #0x1f,%d0
    lsr     #1,%d0
    add.b   #1,%d0
    lsl     #1,%d0
    add.w   %d0,%a1
    add.w   #2,%a1      /* skip PTR */
    move.w  %a1,-(%a5)  // push entry address(CFA)
    // 1 or -1, based on the precedence
    eor.w   %d0,%d0
    move.b  (%a0),%d0
    lsr.b   #4,%d0
    and.b   #6,%d0      // 0: normal, 2: immediate, 4: super
    neg.w   %d0         // 0: normal, -2: immediate, -4: super
    add.w   #1,%d0      // 1: normal, -1: immediate, -3: super
    move.w  %d0,-(%a5)  // push result
find_2:
    endcode

//
// execute .. (xt -- )
//
code execute execute_word
    move.w  (%a5)+,%a0
    move.w  %a6,-(%a7)  // save IP
    move.w  #exec_11,%a6
    jmp     (%a0)
exec_11:
    dc.w    exec_12
exec_12:
    move.w  (%a7)+,%a6
    endcode

//
// number 
//   (c-addr base -- 0 | single 1 | double 2)
//
code number
    move.w  %d3,-(%a7)      // push %d3
    move.w  %d4,-(%a7)      // push %d4
    //
    move.w  (%a5)+,%d3      // base -> %d3
    eor.l   %d1,%d1
    move.l  %d1,%a0
    move.w  (%a5)+,%a0      // c-addr -> %a0
    eor.w   %d1,%d1
    move.b  (%a0)+,%d1      // # of chars -> %d1(word) 
    // %a0 ... input string
    // %d1 ... number of characters
    /*
     * %d4 bit0: minus flag,
     *     bit1: data valid flag
     * %d3 __base
     * %d2 accumulator
     * %d1 number of chars (rest chars)
     */
    eor.l   %d4,%d4         /* clear %d4 flags */
    eor.l   %d2,%d2         /* clear accumulator */
    eor.l   %d0,%d0         // clear upper 8 bit of %d0
do_num1:
    and.w   %d1,%d1         /* check if zero */
    beq     do_num_invalid  // invalid if null string
    // check the first char
    cmp.b  #45,(%a0)        // first char is minus?
    bne     do_num3
    /* minus char */
    or.w    #1,%d4          /* set %d4 minus flag */
    add.l   #1,%a0
    sub.w   #1,%d1
    /* check if next char is available */
    beq     do_num_invalid  // minus only word means invalid
    /* gather digits */
do_num3:
    and.w   %d1,%d1
    beq     do_num_e
    eor.l   %d0,%d0
    move.b  (%a0)+,%d0
    sub.w   #1,%d1
    jsr     (tonumber)
    and.l   %d0,%d0
    bmi     do_num_invalid
    /* accumulate it */
    nop
    eor.l   %d4,%d4
    move.w  %d2,%d4    
    mulu    %d3,%d4         // %d4 = lower 16bit * base
    swap    %d2
    and.l   #0xffff,%d2
    mulu    %d3,%d2         // $d2 = upper 16bit * base
    and.l   #0xffff,%d2
    swap    %d2
    add.l   %d4,%d2
    and.l   #0xff,%d0
    add.l   %d0,%d2         // %d2 = %d2 * (base) + %d0
    bra     do_num3
do_num_invalid:
    // non number character, invalid conversion
    eor.w   %d0,%d0
    move.w  %d0,-(%a5)
    bra     do_num_end

do_num_e:
    /* valid char */
    and.l   #1,%d4           /* check minus flag */
    beq     do_num_e3
    neg.l   %d2
do_num_e3:
    // double word?
    move.w  #1,%d1
    move.l  %d2,%d0
    swap    %d0
    cmp.w   #0,%d0
    beq     do_num_single_p
    cmp.w   #0xffff,%d0
    beq     do_num_single_n
    // double number, -> high low #2
    bra     do_num_double
do_num_single_p:
    and.l   %d0,%d0
    bpl     do_num_single
    bra     do_num_double
do_num_single_n:
    and.l  %d0,%d0
    bmi     do_num_single
    // fall down do_num_double
do_num_double:
    add.w   #1,%d1
    move.w  %d0,-(%a5)  // push high
do_num_single:
    swap    %d0
    move.w  %d0,-(%a5)  // push low
    move.w  %d1,-(%a5)   // push 1 or 2
do_num_end:
    move.w  (%a7)+,%d4
    move.w  (%a7)+,%d3
    endcode

//
// return stack
//
code >r pushr
    // push to return stack
    move.w  (%a5)+,-(%a4)
    endcode
code r> popr
    move.w  (%a4)+,-(%a5)
    endcode

//
// compile .. put next word in the list to code dictionary
//
word compile immediate
    popr
    dup
    atfetch     // get the next word from the word-list
    comma       // put it to the dict entry

    cell_inc    // skip ip (return pointer to skip the next word)
    pushr
    endword
//
// CELL+, CELL-
//
word cell+ cell_inc
    lit 2
    add
    endword
word cell- cell_dec
    lit 2
    sub
    endword
//
// ,(comma) ... put a word to the dict entry, cell_inc to (here_addr)
//
code , comma
    eor.l   %d0,%d0
    move.w  (here_addr),%d0
    move.l  %d0,%a0
    move.w  (%a5)+,(%a0)+
    move.w  %a0,(here_addr)
    endcode

code break immediate
bp009:
    nop
    endcode
//
// IF ... ELSE ... THEN
//
word if immediate
    // put `do_bne`
    lit beq
    comma               // put `do_bne` to dict
    // save operand addr
    here                // get dict poiner
    lit 0
    comma
    endword

word else immediate
    // put `do_bra`
    lit bra
    comma
    // restore rstack top
    here    // push operand addr
    lit 0   // dummy operand value
    comma
    swap    // exchange to get previous branch operand addr
    then
    endword

word then level2
    dup
    here
    // (A A here)
    swap
    sub
    lit 2
    sub
    // (A offset(here - (A + 2)))
    swap
    // (offset A)
    exclamation
    endword

word : colon
    create
    put_link
    put_list
    start_compile
    endword

word ; semicolon immediate
    end_compile
    lit #do_exit
    comma
    // tos is current entry top
    last
    exclamation     // change last
    endword

/*
 * primitive words
 */
code dup 
    move.w  (%a5),-(%a5)
    endcode
code over
    move.w  +2(%a5),-(%a5)
    endcode
code drop
    add.w   #2,%a5
    endcode
code swap
    move.w  (%a5)+,%d0
    move.w  (%a5)+,%d1
    move.w  %d0,-(%a5)
    move.w  %d1,-(%a5)
    endcode
code rot
    move.w  (%a5)+,%d0  /* n */
    move.w  (%a5)+,%d1  /* m */
    move.w  (%a5)+,%d2  /* l */
    move.w  %d1,-(%a5)
    move.w  %d0,-(%a5)
    move.w  %d2,-(%a5)
    endcode

// -----------------------
// binary operators
//
code + add
    move.w  (%a5)+,%d0
    add.w   %d0,(%a5)
    endcode

code - sub
    move.w  (%a5)+,%d0
    sub.w   %d0,(%a5)
    endcode

code * mul
    move.w  (%a5)+,%d0
    muls.w  (%a5),%d0
    move.w  %d0,(%a5)
    endcode

code / div
    move.w  (%a5)+,%d0
    move.w  (%a5),%d1
    and.w   %d1,%d1
    bpl     div_1
    or.l    #0xffff0000,%d1
div_1:
    divs.w  %d0,%d1
    move.w  %d1,(%a5)
    endcode
code lsr
    move.w  (%a5),%d0
    lsr.w   #1,%d0
    move.w  %d0,(%a5)
    endcode

// -------------------------------
// print words
// -------------------------------
//
// .(period) (n -- )... print a number
//
code . period
    move.w  (%a5)+,%d0
    jsr     (do_putnum)
    endcode
//
// cr ... print crlf
//
code cr
    move.b  #13,%d0
    jsr     (putch)
    move.b  #10,%d0
    jsr     (putch)
    endcode
//
// space ... print a space char
//
code space
    move.b  #' ',%d0
    jsr     (putch)
    endcode
//
// bl ( -- #' ') put a space char on the stack
//
code bl
    move.w  #' ',-(%a5)
    endcode
//
// typeb (addr --) ... print a word string, till a space encounters
//
code typeb
    move.w  (%a5)+,%a0
    jsr     (typeb_sub)
    endcode
//
// types (addr --)
//
code types
    move.w  (%a5)+,%a0
    jsr     (putstr)
    endcode
/*
 * type0 (addr n -- )
 */
code type0
    move.w  (%a5)+,%d1
    move.w  (%a5)+,%a0
    cmp.b   #0,%d1
type0_1:
    beq     type0_2
    move.b  (%a0)+,%d0
    jsr     (putch)
    add.b   #-1,%d1
    bra.b   type0_1
type0_2:
    endcode
/*
 * memory access
 */
code @ atfetch
    move.w  (%a5),%a0
    move.w  (%a0),%d0
    move.w  %d0,(%a5)
    endcode
code c@ bytefetch
    move.w  (%a5),%a0
    move.b  (%a0),%d0
    and.w   #255,%d0
    move.w  %d0,(%a5)
    endcode
code ! exclamation
    move.w  (%a5)+,%a0
    move.w  (%a5)+,%d0
    move.w  %d0,(%a0)
    endcode
code c! bytedeposite
    move.w  (%a5)+,%a0
    move.w  (%a5)+,%d0
    move.b  %d0,(%a0)
    endcode

/*
 * base ... number/period base number
 */
code base
    move.w  #__base,-(%a5)
    endcode
//
// hex, DECIMAL
//
word hex
    lit 16
    base
    exclamation
    endword

word decimal
    lit 10
    base
    exclamation
    endword

//
// dictonary words
//

//
// here ... push next to end-of-the-last entry
//
//code here
//    move.w  (here_addr),-(%a5)
//    endcode
//
// last ... push the address of the last entry
//
code last
    move.w  #last_addr,-(%a5)
    endcode
//
// where ... type name of last entry
//
word where
    last        // 最終辞書エントリの先頭アドレス
    atfetch     // を取り出しスタックに乗せる
    dup
    lit
    1
    add         // アドレスを1足して文字列先頭を指す
                // ようにする。
    swap        // それをプッシュして
    bytefetch   // 文字数カウンタを取り出し
    lit
    31          
    and         // 0x1fでANDする(上3ビットをクリアする)
    type0       // これでスタックトップが(addr n)になった
                // のでtype0を呼び出す
    endword
//
// h
//
word h 
    lit #here_addr
    endword
//
// here ... same as `h @`
//
word here
    lit #here_addr
    atfetch
    endword
//
// allot ... advance dict-tail pointer
//   (n allot --)
word allot
    lit #here_addr
    dup
    atfetch
    rot
    add         // here n plut
    swap        // (addr value -- )
    exclamation // store it
    endword


/*
 * logical binary operators
 */

code and
    move.w  (%a5)+,%d0
    and.w   %d0,(%a5)
    endcode
code or
    move.w  (%a5)+,%d0
    or.w   %d0,(%a5)
    endcode
code xor
    move.w  (%a5)+,%d0
    eor.w   %d0,(%a5)
    endcode
/*
 * not ... logical inversion, not 0 if 0, 0 if not 0
 */

code not
    move.w  (%a5),%d0
    and.w   %d0,%d0
    beq     xcode_1
    move.w   #-1,%d0
xcode_1:
    add.w   #1,%d0
    move.w  %d0,(%a5)
    endcode

code emit
    move.w  (%a5)+,%d0
    jsr    (putch)
    endcode
//
// compilers
//
code in> in_stream
    jsr     (getchar)
    move.w  %d0,-(%a5)
    endcode
//
// word ... read a word from input stream and
//          put it to the end-of-dictionary
//      (c -- addr)
//
code word
    move.w  (%a5)+,%d1      // delimit .. %d1
    eor.l   %d0,%d0
    move.w  (here_addr),%d0
    move.l  %d0,%a1         // %a1, here + 1(string start point)
    move.l  %a1,-(%a7)      // push %a1
    add.l   #1,%a1          // start point is here + 1
    move.w  #31,%d2         // %d2, destination max size
    and.b   %d2,%d2
word_1:
    beq     word_2
    jsr     (getchar)       // buffered/block input
    move.b  %d0,(%a1)+
    cmp.b   %d1,%d0
    beq     word_2
    add.w   #-1,%d2
    bra     word_1
word_2:
    cmp.b   -(%a1),%d1      // last char is delimiter?
    beq     word_3
    add.l   #1,%a1          // restore %a1
word_3:
    move.l  (%a7)+,%a0      // restore top-of-entry addr
    move.l  %a1,%d0
    sub.l   %a0,%d0         // end-addr - start-addr -> %d0
    add.b   #-1,%D0         // dec 1 omiiting top one byte
    move.b  %d0,(%a0)       // put n to top-of-the entry
    move.w  %a0,-(%a5)
    endcode

//
// create ... read a word from input stream and 
//            put it to the end-of-dictionary
//
word create
    // copy word name at the beginning of new entry
    bl
    word    // name string is copied.
    dup
    bytefetch
    // get link offset
    lsr     // n / 2
    lit 1
    add     // (n / 2 + 1)
    dup
    add     // (n / 2 + 1) * 2
    // now we get the offset
    dup
    // 
    here
    add     // here + offset
    last
    atfetch
    swap
    exclamation // `last` value to be set to link field
    // set MSB on top-of-entry(here)
    here
    dup
    bytefetch     // get top-of-two bytes
    lit 0x80
    or
    swap
    bytedeposite
    // link offset remains, H will be added with it
    allot
    endword
//
// STATE, _STATE
//
code state
    move.w  (__state),-(%a5)
    endcode
code _state
    move.w  #__state,-(%a5)
    endcode
//
// [, ]
//
code [ start_compile
    add.w  #1,(__state)
    endcode
code ] end_compile
    add.w  #-1,(__state)
    endcode

code puthex2
    move.w  (%a5)+,%d0
    jsr     (puthex2_safe)
    endcode
code puthex4
    move.w  (%a5)+,%d0
    jsr     (puthex4_safe)
    endcode
//
// dump (addr -- addr), dump 16 byte, next addr remains
//
word dump
    lit 16
    over
    puthex4
    lit ':'
    emit
dump_2:
    dup
    not
    bne dump_1         // jump if zero
    swap            // addr on top
    dup
    bytefetch
    puthex2
    space
    lit 1
    add
    swap
    lit 1
    sub
    bra dump_2
dump_1:
    drop            // remain next address
    cr
    endword
//
// 's, s0 ... tick_s
//
code 's tick_s
    move.w  %d0,-(%a5)       // dummy push
    move.w  %a5,(%a5)
    endcode
code s0
    move.w  #dsp_end,-(%a5)
    endcode
code put_list
    move.w  (here_addr),%d0
    and.l   #0xffff,%d0
    move.l  %d0,%a1         // dest: %a1, here
    move.l  #do_decimal,%a0    // src:  %a0  do_decimal, jmp (do_list)
    move.w  (%a0)+,(%a1)+
    move.w  (%a0)+,(%a1)+
    move.w  (%a0)+,(%a1)+   // copy three words
    move.w  %a1,(here_addr) // allot 3 words
    endcode

word put_link
    last
    atfetch         // addr of last entry
    here
    exclamation     // put it on the entry body
    lit 2
    allot
    endword

word test2
test2_1:
    lit 0x61
    emit
    bra test2_1
    endword

/*
 * test words again
 */
word branch
    bne  bra_1
    lit  #false_str
    bra  bra_2
bra_1:
    lit  #true_str
bra_2:
    types
    cr
    endword
word ttest
    lit  #true_str
    types
    endword

word test
    lit 32
    word
    lit 10
    number
    endword


